#include "token_type.h"

using namespace lexer;

static std::map<lexer::token_type, std::string> token_type_map = {
        {eof, "eof"},
        {integer, "integer"},
        {boolean, "boolean"},
        {identifier, "identifier"},
        {let, "let"},
        {func, "func"},
        {ret, "return"},
        {package, "package"},
        {static_, "static"},
        {extern_, "extern"},
        {if_, "if"},
        {else_, "else"},
        {while_, "while"},
        {do_, "do"},
        {switch_, "switch"},
        {for_, "for"},
        {foreach, "foreach"},
        {in, "in"},
        {break_, "break"},
        {breakall, "breakall"},
        {continue_, "continue"},
        {loop, "loop"},
        {l_parenthesis, "("},
        {r_parenthesis, ")"},
        {l_bracket, "["},
        {r_bracket, "]"},
        {l_curly_brace, "{"},
        {r_curly_brace, "}"},
        {plus, "+"},
        {minus, "-"},
        {asterisk, "*"},
        {percent, "%"},
        {slash, "/"},
        {colon, ":"},
        {semicolon, ";"},
        {dot, "."},
        {coma, ","},
        {exclamation_mark, "!"},
        {bitwise_not, "~"},
        {cast, ">-"},
        {plus_plus, "++"},
        {minus_minus, "--"},
        {bitwise_and, "&"},
        {bitwise_or, "|"},
        {bitwise_xor, "^"},
        {logical_and, "&&"},
        {logical_or, "||"},
        {assign, "="},
        {plus_assign, "+="},
        {minus_assign, "-="},
        {multiply_assign, "*="},
        {divide_assign, "/="},
        {modulus_assign, "%="},
        {equals, "=="},
        {not_equals, "!="},
        {less_than, "<"},
        {greater_than, ">"},
        {less_or_equal, "<="},
        {greater_or_equal, ">="}
};

std::string lexer::convert_token_type_to_string(const lexer::token_type& type) {
    return token_type_map[type];
}