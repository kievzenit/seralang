<translation_unit> ::= <package_statement> <top_statement>*


<package_statement> ::= "package" <identifier> ("." <identifier>)* ";"

<top_statement> ::= <func_prototype_decl_statement> | <func_decl_statement> | <let_statement>

<statement> ::= <return_statement>
    | <func_decl_statement>
    | <let_statement>
    | <scope_statement>
    | <identifier_assignment_statement>

<type_denotation> ::= ":" <basic_type>

<func_param> ::= <identifier> <type_denotation>
<func_params> ::= "(" (<func_param> ("," <func_param>)*)? ")"
<func_return> ::= <basic_type>
<func_decl> ::= "func" <identifier> <func_params> <func_return>

<func_prototype_decl_statement> ::= "extern" <func_decl> ";"
<func_decl_statement> ::= <func_decl> <scope_statement>

<assignment> ::= "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
<let_statement> ::= "static"? "let" <identifier> <type_denotation>? "=" <expression> ";"

<identifier_assignment_statement> ::= <identifier> <assignment> <expression> ";"

<scope_statement> ::= "{" <statement>* "}"

<return_statement> ::= "return" <expression> ";"

<expression> ::= <primary_expression> | <binary_expression>

<arithmetic_operator> ::= "+"
    | "-"
    | "*"
    | "/"
    | "%"

<binary_expression> ::= <expression> <arithmetic_operator> <expression>

<relational_operator> ::= ">"
    | "<"
    | ">="
    | "<="
    | "!="
    | "=="

<primary_expression> ::= <boolean_expression>
    | <integer_expression>
    | <identifier_expression>
    | <call_expression>

<call_expression> ::= <identifier> "(" (<expression> ("," <expression>)*)? ")"

<identifier_expression> ::= <identifier>

<integer_expression> ::= <number>

<boolean_expression> ::= "true" | "false"


<basic_type> ::= "void"
    | "bool"
    | <integer_type>

<integer_type> ::= "int1"
    | "int8"
    | "int16"
    | "int32"
    | "int"
    | "int64"
    | "uint8"
    | "uint16"
    | "uint32"
    | "uint"
    | "uint64"

<identifier> ::= (<letter> | "_") | <identifier> (<letter> | <decimal_digit> | "_")+

<letter> ::= [a-z] | [A-Z]

<int_type_denotation> ::= ":" <integer_type>

<number> ::= <numbers> <int_type_denotation>?

<numbers> ::= <decimal_number>
    | <complex_hexadecimal_number>
    | <complex_decimal_number>
    | <complex_octal_number>
    | <complex_binary_number>

<complex_hexadecimal_number> ::= "0x" <hexadecimal_digit>+
<complex_decimal_number> ::= "0d" <decimal_digit>+
<complex_octal_number> ::= "0o" <octal_digit>+
<complex_binary_number> ::= "0b" <binary_digit>+

<decimal_number> ::= <decimal_digit>+

<hexadecimal_digit> ::= <decimal_digit> | [a-f]
<decimal_digit> ::= <octal_digit> | [8-9]
<octal_digit> ::= <binary_digit> | [2-7]
<binary_digit> ::= [0-1]