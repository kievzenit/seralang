<translation_unit> ::= <package_statement> <top_statement>*



<package_statement> ::= "package" <identifier> ("." <identifier>)* ";"



<top_statement> ::= <func_decl> | <let_statement>


<func_decl> ::= "extern"? "func" <identifier> <func_params> <func_return> (";" | <scope_statement>)

<func_param> ::= <identifier> <type_denotation>
<func_params> ::= "(" (<func_param> ("," <func_param>)*)? ")"
<func_return> ::= <basic_type>



<statement> ::= <compound_statement> | <control_flow_statement> | <local_statement> | <scope_statement>

<scope_statement> ::= "{" <statement>* "}"



<compound_statement> ::= <if_statement>
    | <while_statement>
    | <do_while_statement>
    | <loop_statement>
    | <for_statement>

<for_statement> ::= "for"
    "("
        (<local_statement> ("," <local_statement>)*) ";"
        <expression> ";"
        (<assignment_statement> ("," <assignment_statement>)*)
    ")"
    <scope_statement>
<loop_statement> ::= "loop" <scope_statement>
<do_while_statement> ::= "do" <scope_statement> "while" <parenthesis_expression> ";"
<while_statement> ::= "while" <parenthesis_expression> <scope_statement>

<if_statement> ::= "if" <parenthesis_expression> <scope_statement> <else_if_statement>* <else_statement>?
<else_if_statement> ::= "else" "if" <parenthesis_expression> <scope_statement>
<else_statement> ::= "else" <scope_statement>


<control_flow_statement> ::= <continue_statement>
    | <break_statement>
    | <breakall_statement>
    | <return_statement>

<continue_statement> ::= "continue"
<break_statement> ::= "break" <integer_expression>?
<breakall_statement> ::= "brekall"
<return_statement> ::= "return" <expression> ";"


<local_statement> ::= <let_statement> | <assignment_statement>

<let_statement> ::= "static"? "let" <identifier> <type_denotation>? <assignment_operator> <expression> ";"
<assignment_statement> ::= <identifier> <assignment_operator> <expression> ";"

<assignment_operator> ::= <binary_operator>? "="



<expression> ::= <primary_expression> | <binary_expression>


<binary_expression> ::= <arithmetic_expression> | <relational_expression> | <logical_expression> | <bitwise_expression>
<binary_operator> ::= <arithmetic_operator> | <relational_operator> | <logical_operator> | <bitwise_operator>

<bitwise_expression> ::= <expression> <bitwise_operator> <expression>
<bitwise_operator> ::= "&" | "|" | "^"

<logical_expression> ::= <expression> <logical_operator> <expression>
<logical_operator> ::= "&&" | "||"

<arithmetic_expression> ::= <expression> <arithmetic_operator> <expression>
<arithmetic_operator> ::= "+"
    | "-"
    | "*"
    | "/"
    | "%"

<relational_expression> ::= <expression> <relational_operator> <expression>
<relational_operator> ::= ">"
    | "<"
    | ">="
    | "<="
    | "!="
    | "=="


<primary_expression> ::= <boolean_expression>
    | <integer_expression>
    | <identifier_expression>
    | <parenthesis_expression>
    | <call_expression>

<call_expression> ::= <identifier> "(" (<expression> ("," <expression>)*)? ")"
<parenthesis_expression> ::= "(" <expression> ")"
<identifier_expression> ::= <identifier>
<integer_expression> ::= <number_literal>
<boolean_expression> ::= "true" | "false"



<type_denotation> ::= ":" <basic_type>
<basic_type> ::= "void"
    | "bool"
    | <integer_type>

<int_type_denotation> ::= ":" <integer_type>
<integer_type> ::= "int1"
    | "int8"
    | "int16"
    | "int32"
    | "int"
    | "int64"
    | "uint8"
    | "uint16"
    | "uint32"
    | "uint"
    | "uint64"



<identifier> ::= (<letter> | "_") | <identifier> (<letter> | <decimal_digit> | "_")+
<letter> ::= [a-z] | [A-Z]


<number_literal> ::= <number_literals> <int_type_denotation>?

<number_literals> ::= <decimal_number_literal>
    | <complex_hexadecimal_number_literal>
    | <complex_decimal_number_literal>
    | <complex_octal_number_literal>
    | <complex_binary_number_literal>

<complex_hexadecimal_number_literal> ::= "0x" <hexadecimal_digit>+
<complex_decimal_number_literal> ::= "0d" <decimal_digit>+
<complex_octal_number_literal> ::= "0o" <octal_digit>+
<complex_binary_number_literal> ::= "0b" <binary_digit>+

<decimal_number_literal> ::= <decimal_digit> ("_" | <decimal_digit>)*

<hexadecimal_digit> ::= <decimal_digit> | [a-f]
<decimal_digit> ::= <octal_digit> | [8-9]
<octal_digit> ::= <binary_digit> | [2-7]
<binary_digit> ::= [0-1]